{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["InputFields","useInput","type","id","label","useState","value","setValue","htmlFor","onChange","e","target","initialBalance","setInitialBalance","currentBalance","setBalance","day","setDay","remainingDay","setRemainingDay","requiredVal","setRequiredVal","totalVal","Number","amountNeeded","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAWA,IAAMA,EAAc,WAClB,SAASC,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAiB,EACnBC,mBAAS,IADU,mBACtCC,EADsC,KAC/BC,EAD+B,KAmB7C,MAAO,CAACD,EAhBN,mCACE,+BACE,6BACE,wBAAOE,QAASL,EAAhB,UAAqBC,EAArB,SAEF,6BACE,uBACEE,MAAOA,EACPG,SAAU,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOL,QACnCJ,KAAMA,EACNC,GAAIA,YAdQ,MAsBoBF,EAAS,CACnDC,KAAM,SACNC,GAAI,aACJC,MAAO,sCAzBe,mBAsBjBQ,EAtBiB,KAsBDC,EAtBC,OA2BaZ,EAAS,CAC5CC,KAAM,SACNC,GAAI,UACJC,MAAO,oBA9Be,mBA2BjBU,EA3BiB,KA2BDC,EA3BC,OAgCFd,EAAS,CAC7BC,KAAM,SACNC,GAAI,MACJC,MAAO,uBAnCe,mBAgCjBY,EAhCiB,KAgCZC,EAhCY,OAqCgBhB,EAAS,CAC/CC,KAAM,SACNC,GAAI,MACJC,MAAO,iCAxCe,mBAqCjBc,EArCiB,KAqCHC,EArCG,OA0CclB,EAAS,CAC7CC,KAAM,SACNC,GAAI,SACJC,MAAO,6BA7Ce,mBA0CjBgB,EA1CiB,KA0CJC,EA1CI,KA+ClBC,GAAYC,OAAOX,GAAkBW,OAAOH,IAAgBG,OAAOP,GACnEQ,GACHD,OAAOD,GACNC,OAAOT,IAAmBS,OAAOP,GAAOO,OAAOL,KACjDK,OAAOL,GAET,OACE,qCACE,gCACE,kCACGL,EACAI,EACAI,EACAN,EACAI,OAGL,qDACqBH,EADrB,UACiCJ,EAAiBI,KAElD,8BAAMI,GAAe,2DAA8BE,OACnD,gEAAmCE,GAA8B,WAKxDC,EAjFf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d1a56d0f.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputFields></InputFields>\n    </div>\n  );\n}\n\nconst InputFields = () => {\n  function useInput({ type, id, label /*...*/ }) {\n    const [value, setValue] = useState(\"\");\n    const input = (\n      <>\n        <tr>\n          <td>\n            <label htmlFor={id}>{label}:</label>\n          </td>\n          <td>\n            <input\n              value={value}\n              onChange={(e) => setValue(e.target.value)}\n              type={type}\n              id={id}\n            />\n          </td>\n        </tr>\n      </>\n    );\n    return [value, input];\n  }\n  const [initialBalance, setInitialBalance] = useInput({\n    type: \"number\",\n    id: \"initialBal\",\n    label: \"Initial Balance at start of month\",\n  });\n  const [currentBalance, setBalance] = useInput({\n    type: \"number\",\n    id: \"currBal\",\n    label: \"Current Balance\",\n  });\n  const [day, setDay] = useInput({\n    type: \"number\",\n    id: \"day\",\n    label: \"Days in this month\",\n  });\n  const [remainingDay, setRemainingDay] = useInput({\n    type: \"number\",\n    id: \"day\",\n    label: \"Remaining days in this month\",\n  });\n  const [requiredVal, setRequiredVal] = useInput({\n    type: \"number\",\n    id: \"reqVal\",\n    label: \"How much more in average\",\n  });\n  const totalVal = (Number(initialBalance) + Number(requiredVal)) * Number(day);\n  const amountNeeded =\n    (Number(totalVal) -\n      Number(currentBalance) * (Number(day) - Number(remainingDay))) /\n    Number(remainingDay);\n\n  return (\n    <>\n      <table>\n        <tbody>\n          {setInitialBalance}\n          {setDay}\n          {setRequiredVal}\n          {setBalance}\n          {setRemainingDay}\n        </tbody>\n      </table>\n      <div>\n        Total Balance for {day} days: {initialBalance * day}\n      </div>\n      <div>{requiredVal && <div>Required total balance: {totalVal}</div>}</div>\n      <div>Amount needed to be in bank: {amountNeeded ? amountNeeded : \"0\"}</div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}